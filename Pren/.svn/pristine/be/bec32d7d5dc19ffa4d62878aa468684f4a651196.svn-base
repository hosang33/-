<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="orders">
	<!-- 주문정보 저장 -->
	<insert id="insertOrder" parameterClass="Order">
		insert into ORDER_TABLES
		(ORDER_NO, USER_NO, ITEM_NO, ORDER_STATE, ORDER_SHEET, ORDER_CREATE_DATE, ORDER_COMPLEATE_DATE, TOTAL_PRICE)
		values
		(order_table_seq.nextval, #userNo#, #itemNo#, #state#, #sheet#, sysdate, #compleateDate#, #totalPrice#)
	</insert>

	<!--특정 유저가 구입한 상품 조회 -->
	<select id="getAllOrderByUserNo" parameterClass="int" resultClass="Order">
		select
			A.order_no 				 as no,
			A.user_no 				 as userNo,
			A.item_no    			 as itemNo,
			A.order_state 			 as state,
			A.order_sheet 			 as sheet,
			A.order_create_date 	 as createDate,
			A.TOTAL_PRICE 			 as totalPrice,
			A.order_compleate_date   as compleateDate,
			B.item_title        	 as "saleItem.title",
			B.item_price 			 as "saleItem.price",
			C.user_name				 as "user.name",
			C.user_nickname 		 as "user.nickName"
		from
			order_tables A, SALE_ITEM_TABLES B, user_tables C
		where
			A.item_no = B.item_no 
		and
			B.user_no = C.user_no
		and
			A.user_no = #value#
		order by
			A.order_create_date desc
	</select>
	<select id="getAllOrderBySellerUserNo" parameterClass="int" resultClass="Order">
		select
			A.order_no 				 as no,
			A.user_no 				 as userNo,
			A.item_no    			 as itemNo,
			A.order_state 			 as state,
			A.order_sheet 			 as sheet,
			A.order_create_date 	 as createDate,
			A.TOTAL_PRICE 			 as totalPrice,
			A.order_compleate_date   as compleateDate,
			B.item_title        	 as "saleItem.title",
			B.item_price 			 as "saleItem.price",
			C.user_name				 as "user.name",
			C.user_nickname 		 as "user.nickName"
		from
			order_tables A, SALE_ITEM_TABLES B, user_tables C
		where
			B.user_no = #value#
		and
			A.item_no = B.item_no 
		and
		    C.user_no = A.USER_NO
		order by
			A.order_create_date desc
	</select>
	<select id="getAllOrderBySearchForm" parameterClass="map" resultClass="Order">
		select
			A.order_no 				 as no,
			A.user_no 				 as userNo,
			A.item_no    			 as itemNo,
			A.order_state 			 as state,
			A.order_sheet 			 as sheet,
			A.order_create_date 	 as createDate,
			A.order_compleate_date   as compleateDate,
			A.TOTAL_PRICE 			 as totalPrice,
			B.item_title        	 as "saleItem.title",
			B.item_price 			 as "saleItem.price",
			C.user_name				 as "user.name",
			C.user_nickname			 as "user.nickName"
		from
			order_tables A, SALE_ITEM_TABLES B, user_tables C
		where
			A.user_no = #userNo#
		and
			A.item_no = B.item_no 
		and
			B.user_no = C.user_no
		<dynamic prepend="and">
			<isEqual property="selectState" compareValue="전체">
				A.order_state in ('완료','환불') 
			</isEqual>
			<isNotEqual property="selectState" compareValue="전체">
				A.order_state = #selectState#
			</isNotEqual>
		</dynamic>
		and 
			rownum &lt;=#selectDisplayNum#
		and
			A.order_create_date between TO_DATE(#startDate#, 'yyyy-mm-dd') and TO_DATE(#endDate#, 'yyyy-mm-dd')
		order by
			A.order_create_date desc
	</select>
	
	<select id="getOrderByItemNoAndUserNo" parameterClass="map" resultClass="Order">
		select
			A.order_no 				 as no,
			A.user_no 				 as userNo,
			A.item_no    			 as itemNo,
			A.order_state 			 as state,
			A.order_sheet 			 as sheet,
			A.TOTAL_PRICE 			 as totalPrice,
			A.order_create_date 	 as createDate,
			A.order_compleate_date   as compleateDate,
			B.item_title        	 as "saleItem.title",
			B.item_price 			 as "saleItem.price",
			C.user_name				 as "user.name",
			C.user_nickname 		 as "user.nickName"
		from
			order_tables A, SALE_ITEM_TABLES B, user_tables C
		where
			A.item_no = B.item_no 
		and
			B.user_no = C.user_no
		and
			A.item_no  = #itemNo#
		and
			A.user_no  = #userNo#
	</select>
	
	<!-- 같은 유저아이디의 최신 주문아이템 조회하기 -->
	<select id="getNewOrderByMap" parameterClass="map" resultClass="Order">
		select
			order_no 				as no,
			user_no 				as userNo,
			item_no    			 	as itemNo,
			order_state 			as state,
			order_sheet 			as sheet,
			TOTAL_PRICE 			as totalPrice,
			order_create_date 	 	as createDate,
			order_compleate_date   	as compleateDate
		from(SELECT
				ROWNUM			as r,
				order_no,
				user_no,
				item_no,
				TOTAL_PRICE,
				order_state,
				order_sheet,
				order_create_date,
				order_compleate_date 
			FROM(
				SELECT
					ROWNUM			as r,
					order_no,
					user_no,
					item_no,
					TOTAL_PRICE,
					order_state,
					order_sheet,
					order_create_date,
					order_compleate_date 
				FROM
					ORDER_TABLES
				ORDER BY
					order_compleate_date DESC	)
				
			WHERE
				user_no = #userNo#
			and
				item_no = #productNo#)
			
		where
			r &lt;= 1
	</select>

	<select id="getOrderByOrderNo" parameterClass="int" resultClass="Order">
		select
			A.order_no 				 as no,
			A.user_no 				 as userNo,
			A.item_no    			 as itemNo,
			A.order_state 			 as state,
			A.order_sheet 			 as sheet,
			A.order_create_date 	 as createDate,
			A.TOTAL_PRICE 			 as totalPrice,
			A.order_compleate_date   as compleateDate,
			B.item_title        	 as "saleItem.title",
			B.item_price 			 as "saleItem.price",
			C.user_name				 as "user.name"
		from
			order_tables A, SALE_ITEM_TABLES B, user_tables C
		where
			A.item_no = B.item_no 
		and
			B.user_no = C.user_no
		and
			A.order_no = #value#
		order by
			A.order_create_date desc
		
	</select>
	<select id="getAllOrderManager" parameterClass="map" resultClass="Order">
		select
			order_no 				 as no,
			item_no    				 as itemNo,
			order_state 			 as state,
			order_sheet 			 as sheet,
			order_create_date 		 as createDate,
			order_compleate_date     as compleateDate,
			TOTAL_PRICE 			 as totalPrice,
			item_title        		 as "saleItem.title",
			item_price 				 as "saleItem.price",
			SUBCATE_NO				 as "saleItem.subCategoryNo",
			item_solo				 as "saleItem.isSolo",
			user_name				 as "user.name",
			user_nickname			 as "user.nickName",
			subcate_name			 as "subcategory.name"
		from
			(
				select
					ROW_NUMBER() OVER(ORDER by order_compleate_date DESC)  numrow,	
					A.order_no,
					A.item_no ,
					A.order_state ,
					A.order_sheet,
					A.order_create_date,
					A.order_compleate_date,
					A.TOTAL_PRICE,
					B.item_title ,
					B.item_price,
					B.SUBCATE_NO,
					B.item_solo,
					C.user_name,
					C.USER_NICKNAME,  
					D.subcate_name
				FROM			
					order_tables A, SALE_ITEM_TABLES B, user_tables C, sub_category_table D
				where
					A.item_no = B.item_no 
				and
					A.user_no = C.user_no	
				and
					B.subcate_no = D.subcate_no
				<dynamic>
					<isNotNull property="selectedCategory">
						and B.SUBCATE_NO in (select SUBCATE_NO
											 from SUB_CATEGORY_TABLE
											 where MAINCATE_NO = #selectedCategory#)
					</isNotNull>
					<isNotEqual property="isSolo" compareValue="전체" >
						and B.item_solo = #isSolo#
					</isNotEqual>
				</dynamic>
				and
					A.order_compleate_date between TO_DATE(#startDate#, 'yyyy-mm-dd') and TO_DATE(#endDate#, 'yyyy-mm-dd'))
		where
			numrow >= #begin#
		and
			numrow &lt;= #end#
	</select>
	
	<select id="getAllOrderCount" parameterClass="map" resultClass="int">
		select
			count(*)
		from
			(
				select
					 ROW_NUMBER() OVER(ORDER by order_compleate_date DESC)  numrow	 
				FROM			
					order_tables A, SALE_ITEM_TABLES B, user_tables C
				where
					A.item_no = B.item_no 
				and
					A.user_no = C.user_no	
				<dynamic>
					<isNotNull property="selectedCategory">
						and B.SUBCATE_NO in (select SUBCATE_NO
											 from SUB_CATEGORY_TABLE
											 where MAINCATE_NO = #selectedCategory#)
					</isNotNull>
					<isNotEqual property="isSolo" compareValue="전체">
						and B.item_solo = #isSolo#
					</isNotEqual>
				</dynamic>
				and
					A.order_compleate_date between TO_DATE(#startDate#, 'yyyy-mm-dd') and TO_DATE(#endDate#, 'yyyy-mm-dd'))
	</select>
	
	<select id="getProfitByGroup" resultClass="String">
		SELECT
			SUM(C.TOTAL_PRICE)
		FROM
			SUB_CATEGORY_TABLE A, SALE_ITEM_TABLES B, ORDER_TABLES C
		where
			C.ITEM_NO = B.ITEM_NO
		AND
			B.SUBCATE_NO = A.SUBCATE_NO
		GROUP BY
			A.MAINCATE_NO
	</select>

	<update id="updateOrderByNo" parameterClass="map">
		update
			Order_tables
		set
			order_state = #state#
		where
			order_no  = #orderNo#
	</update>

	<!-- 상품번호에 해당하는 주문 상품 삭제하기 -->
	<delete id="deleteOrder" parameterClass="int">
		delete from
			order_tables
		where
			item_no = #productNo#
	</delete>
	
</sqlMap>